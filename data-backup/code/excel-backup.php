<?php
require_once '../../base-path/config-path.php';
require_once BASE_PATH_1 . 'config_db/config.php';
require_once BASE_PATH_1 . 'session/session-manager.php';

// Start output buffering at the very beginning
ob_start();

SessionManager::checkSession();
$sessionVars = SessionManager::SessionVariables();

$mobile_no = $sessionVars['mobile_no'];
$user_id = $sessionVars['user_id'];
$role = $sessionVars['role'];
$user_login_id = $sessionVars['user_login_id'];
$user_name = $sessionVars['user_name'];
$user_email = $sessionVars['user_email'];

if ($_SERVER["REQUEST_METHOD"] === "POST" && isset($_POST['D_ID']) && isset($_POST['PARAMETER'])) {
    $device_ids = filter_input(INPUT_POST, 'D_ID', FILTER_SANITIZE_STRING);
    $parameter = filter_input(INPUT_POST, 'PARAMETER', FILTER_SANITIZE_STRING);
    $device_ids = strtolower($device_ids);
    
    // Only process if parameter is backup-excel
    if ($parameter !== "backup-excel") {
        ob_end_clean();
        echo json_encode(["status" => "error", "message" => "Invalid parameter value."]);
        exit;
    }
    
    // Sanitize device ID for use in filename
    $safe_device_name = preg_replace('/[^a-zA-Z0-9_-]/', '_', $device_ids);

    // Database connection for backup
    $conn = mysqli_connect(HOST, USERNAME, PASSWORD, $device_ids);
    if (!$conn) {
        ob_end_clean(); // Clean any output
        echo json_encode(["status" => "error", "message" => "Connection failed: " . mysqli_connect_error()]);
        exit;
    }

    // Get all tables (excluding the ones in the $excludeTables array)
    $excludeTables = ["software_update"];
    $tables = [];
    $result = mysqli_query($conn, "SHOW TABLES");
    while ($row = mysqli_fetch_row($result)) {
        if (!in_array($row[0], $excludeTables)) {
            $tables[] = $row[0];
        }
    }

    try {
        // Create a temporary file for CSV output
        $tempFile = tempnam(sys_get_temp_dir(), 'csv_');
        $output = fopen($tempFile, 'w');
        
        // Add metadata
        fwrite($output, "# Database Backup Information\n");
        fwrite($output, "# Database: " . $device_ids . "\n");
        fwrite($output, "# Date Generated: " . date("Y-m-d H:i:s") . "\n");
        fwrite($output, "# Generated By: " . $user_name . "\n\n");
        
        // Export each table 
        foreach ($tables as $table) {
            // Add table header
            fwrite($output, "\n\n# TABLE: " . $table . "\n");
            
            // Get table data
            $result = mysqli_query($conn, "SELECT * FROM `$table`");
            
            if ($result) {
                // Add column headers
                $headers = [];
                while ($fieldInfo = mysqli_fetch_field($result)) {
                    $headers[] = $fieldInfo->name;
                }
                fputcsv($output, $headers);
                
                // Add table data
                while ($row = mysqli_fetch_assoc($result)) {
                    fputcsv($output, $row);
                }
            }
        }
        
        fclose($output);
        
        // Send the file to the browser
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="backup_' . $safe_device_name . '_' . date("Y-m-d_H-i-s") . '.csv"');
        header('Content-Length: ' . filesize($tempFile));
        header('Cache-Control: max-age=0');
        
        // Clean output buffer
        ob_end_clean();
        
        // Send file
        readfile($tempFile);
        
        // Clean up temporary file
        unlink($tempFile);
        
        exit;
    } catch (Exception $e) {
        ob_end_clean();
        echo json_encode(["status" => "error", "message" => "Backup generation failed: " . $e->getMessage()]);
        exit;
    } finally {
        // Close the database connection
        mysqli_close($conn);
    }
} else {
    ob_end_clean(); // Clean any output
    echo json_encode(["status" => "error", "message" => "Invalid request."]);
    exit;
}
?>